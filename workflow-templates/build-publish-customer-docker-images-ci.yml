name: Build and publish Docker images for Customer

on:
  push:
    branches: [customer/*]
  workflow_dispatch:

jobs:
  publish_k8s_demo:
    runs-on: ubuntu-latest

    env:
      CI: true
      NODE_OPTIONS: --max-old-space-size=4096

    steps:
      - name: Slack Start Notification
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${GITHUB_REF} Image Start
          SLACK_WEBHOOK: ${{ secrets.CUSTOMER_BUILDS_SLACK_WEBHOOK }}
          TENANT_NAME: ${GITHUB_REF##*/}
      - uses: actions/checkout@v2
      - name: 'Create .npmrc'
        shell: bash
        run: |
          echo "@${TENANT_NAME}-roadie:registry=https://roadiehq.jfrog.io/artifactory/api/npm/${TENANT_NAME}-roadie/" > .npmrc
          echo "_auth = ${{ secrets.NPM_CONFIG__AUTH }}" >> .npmrc
          echo "always-auth = true" >> .npmrc

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Login to ECR
        id: ecr
        uses: jwalton/gh-ecr-login@v1
        with:
          access-key-id: ${{ secrets.ROADIEBOT_AWS_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.ROADIEBOT_AWS_SECRET_ACCESS_KEY }}
          region: eu-west-1

      - name: fetch branch ${GITHUB_REF}
        run: git fetch origin ${GITHUB_REF}

      - name: yarn upgrade by scope
        run: yarn upgrade --scope @${TENANT_NAME}-roadie

      - name: yarn install
        run: yarn install --frozen-lockfile

      - name: yarn list
        run: yarn list

      - name: type checking and declarations
        run: yarn run tsc --incremental false

      - name: build all packages - TS to JS
        run: yarn run build

      - name: Set image version
        run: echo "IMAGE_VERSION=$(cat IMAGE_VERSION)" >> $GITHUB_ENV

      - name: docker build frontend
        run: yarn run docker-build:app

      - name: docker build backend
        if: github.event_name != 'workflow_dispatch'
        run: yarn workspace example-backend build-image --file $PWD/contrib/docker/kubernetes-example-backend/Dockerfile

      - name: Push frontend to ECR
        run: |
          docker tag spotify/backstage:latest ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-1.amazonaws.com/${TENANT_NAME}-backstage-frontend:${{ github.run_number }}
          docker tag spotify/backstage:latest ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-1.amazonaws.com/${TENANT_NAME}-backstage-frontend:latest
          docker push ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-1.amazonaws.com/${TENANT_NAME}-backstage-frontend:${{ github.run_number }}

      - name: Push backend to ECR
        if: github.event_name != 'workflow_dispatch'
        run: |
          docker tag example-backend:latest ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-1.amazonaws.com/${TENANT_NAME}-backstage-backend:${{ github.run_number }}
          docker tag example-backend:latest ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-1.amazonaws.com/${TENANT_NAME}-backstage-backend:latest
          docker push ${{ steps.ecr.outputs.account }}.dkr.ecr.eu-west-1.amazonaws.com/${TENANT_NAME}-backstage-backend:${{ github.run_number }}

      - name: Slack Notification
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${TENANT_NAME} Image Build Success
          SLACK_WEBHOOK: ${{ secrets.CUSTOMER_BUILDS_SLACK_WEBHOOK }}

      - name: Slack Failure Notification
        if: ${{ failure() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${TENANT_NAME} Image Build Failure
          SLACK_COLOR: '#ff0033'
          SLACK_WEBHOOK: ${{ secrets.CUSTOMER_BUILDS_SLACK_WEBHOOK }}
